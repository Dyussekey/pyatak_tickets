import os
import psycopg2
import requests
from flask import Flask, request, jsonify, send_from_directory
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import telegram.constants
import threading
import schedule
import time


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Render
DB_CONNECTION_STRING = os.environ.get("DATABASE_URL")
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")

app = Flask(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è MarkdownV2."""
    special_chars = r'_*[]()~`>#+-=|{}.!'
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---

async def check_and_remind(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.
    """
    try:
        conn = psycopg2.connect(DB_CONNECTION_STRING)
        cursor = conn.cursor()
        select_query = "SELECT id, club_name, issue_description, status, created_at FROM requests WHERE status = '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ';"
        cursor.execute(select_query)
        open_requests = cursor.fetchall()
        cursor.close()
        conn.close()

        if open_requests:
            message_text = "‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏!* ‚è∞\n\n"
            for req in open_requests:
                req_id, club, description, status, created_at = req
                message_text += f"ID: `{req_id}`\n"
                message_text += f"–ö–ª—É–±: `{club}`\n"
                message_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: `{description}`\n"
                message_text += f"–°—Ç–∞—Ç—É—Å: `{status}`\n"
                message_text += f"–°–æ–∑–¥–∞–Ω–∞: `{created_at.strftime('%Y-%m-%d %H:%M')}`\n\n"
            
            escaped_text = escape_markdown_v2(message_text)
            await context.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=escaped_text, parse_mode=telegram.constants.ParseMode.MARKDOWN_V2)
            print("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            print("–û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()

    data_parts = query.data.split('_')
    action = data_parts[0]
    request_id = int(data_parts[1])
    
    status_map = {
        "done": "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
        "in_progress": "–≤ —Ä–∞–±–æ—Ç–µ"
    }
    new_status = status_map.get(action)

    if not new_status:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    try:
        conn = psycopg2.connect(DB_CONNECTION_STRING)
        cursor = conn.cursor()
        update_query = """
        UPDATE requests SET status = %s WHERE id = %s AND status != %s RETURNING id;
        """
        cursor.execute(update_query, (new_status, request_id, new_status))
        updated_id = cursor.fetchone()
        conn.commit()
        cursor.close()
        conn.close()

        if updated_id:
            await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ `{request_id}` –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '{new_status}'.")
        else:
            await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ `{request_id}` —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{new_status}' –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")

# --- –ú–∞—Ä—à—Ä—É—Ç—ã Flask ---

@app.route('/')
def home():
    return send_from_directory('.', 'index.html')

@app.route('/create_request.html')
def create_request_page():
    return send_from_directory('.', 'create_request.html')

@app.route('/create_request', methods=['POST'])
def create_request():
    try:
        data = request.json
        club = data.get('club')
        description = data.get('description')

        if not club or not description:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"}), 400

        conn = psycopg2.connect(DB_CONNECTION_STRING)
        cursor = conn.cursor()
        insert_query = """
        INSERT INTO requests (club_name, issue_description) VALUES (%s, %s) RETURNING id;
        """
        cursor.execute(insert_query, (club, description))
        request_id = cursor.fetchone()[0]
        conn.commit()
        cursor.close()
        conn.close()
        
        keyboard = [[
            InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{request_id}"),
            InlineKeyboardButton("–í —Ä–∞–±–æ—Ç–µ", callback_data=f"in_progress_{request_id}")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞* –æ—Ç –∫–ª—É–±–∞ `{club}`\n" \
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: `{description}`\n" \
                    f"ID –∑–∞—è–≤–∫–∏: `{request_id}`"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API Telegram —Å –ø–æ–º–æ—â—å—é requests
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            json={
                "chat_id": TELEGRAM_CHAT_ID,
                "text": message_text,
                "reply_markup": reply_markup.to_json(),
                "parse_mode": "Markdown"
            }
        ).raise_for_status()

        return jsonify({"message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", "request_id": request_id}), 201

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return jsonify({"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

@app.route('/requests_history', methods=['GET'])
def get_requests_history():
    try:
        conn = psycopg2.connect(DB_CONNECTION_STRING)
        cursor = conn.cursor()
        select_query = "SELECT id, club_name, issue_description, status, created_at FROM requests ORDER BY created_at DESC;"
        cursor.execute(select_query)
        requests_from_db = cursor.fetchall()
        cursor.close()
        conn.close()

        history = []
        for req in requests_from_db:
            history.append({
                "id": req[0],
                "club_name": req[1],
                "description": req[2],
                "status": req[3],
                "created_at": req[4].isoformat()
            })
        return jsonify(history), 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return jsonify({"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

@app.route('/request_history.html')
def request_history_page():
    return send_from_directory('.', 'request_history.html')

@app.route('/calculator.html')
def calculator_page():
    return send_from_directory('.', 'calculator.html')

@app.route('/tips.html')
def tips_page():
    return send_from_directory('.', 'tips.html')

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---

def run_flask():
    app.run(host='0.0.0.0', port=os.environ.get("PORT", 5000))

def run_bot():
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º job_queue=True
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build(job_queue=True)
    application.add_handler(CommandHandler("start", lambda update, context: update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")))
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (14400 —Å–µ–∫—É–Ω–¥)
    application.job_queue.run_repeating(check_and_remind, interval=14400, first=10)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –∏ –±–æ—Ç–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    flask_thread = threading.Thread(target=run_flask)
    bot_thread = threading.Thread(target=run_bot)
    flask_thread.start()
    bot_thread.start()
