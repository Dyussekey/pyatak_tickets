import os
import psycopg2
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import telegram.constants

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Render
DB_CONNECTION_STRING = os.environ.get("DATABASE_URL")
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")

def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è MarkdownV2."""
    special_chars = r'_*[]()~`>#+-=|{}.!'
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

async def send_request_with_buttons(chat_id, request_id, club, description):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [
            InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{request_id}"),
            InlineKeyboardButton("–í —Ä–∞–±–æ—Ç–µ", callback_data=f"in_progress_{request_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞* –æ—Ç –∫–ª—É–±–∞ `{club}`\n" \
                   f"–û–ø–∏—Å–∞–Ω–∏–µ: `{description}`\n" \
                   f"ID –∑–∞—è–≤–∫–∏: `{request_id}`"

    escaped_text = escape_markdown_v2(message_text)

    await Application.builder().token(TELEGRAM_BOT_TOKEN).build().bot.send_message(
        chat_id=chat_id,
        text=escaped_text,
        reply_markup=reply_markup,
        parse_mode=telegram.constants.ParseMode.MARKDOWN_V2
    )

async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
    data_parts = query.data.split('_')
    action = data_parts[0]
    request_id = int(data_parts[1])
    
    status_map = {
        "done": "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
        "in_progress": "–≤ —Ä–∞–±–æ—Ç–µ"
    }
    
    new_status = status_map.get(action)

    if not new_status:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    try:
        conn = psycopg2.connect(DB_CONNECTION_STRING)
        cursor = conn.cursor()

        update_query = """
        UPDATE requests
        SET status = %s
        WHERE id = %s AND status != %s
        RETURNING id;
        """
        cursor.execute(update_query, (new_status, request_id, new_status))
        updated_id = cursor.fetchone()
        conn.commit()

        cursor.close()
        conn.close()

        if updated_id:
            await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ `{request_id}` –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '{new_status}'.")
        else:
            await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ `{request_id}` —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{new_status}' –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
    data_parts = query.data.split('_')
    action = data_parts[0]
    request_id = int(data_parts[1])
    
    status_map = {
        "done": "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
        "in_progress": "–≤ —Ä–∞–±–æ—Ç–µ"
    }
    
    new_status = status_map.get(action)

    if not new_status:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    try:
        conn = psycopg2.connect(DB_CONNECTION_STRING)
        cursor = conn.cursor()

        update_query = """
        UPDATE requests
        SET status = %s
        WHERE id = %s AND status != %s
        RETURNING id;
        """
        cursor.execute(update_query, (new_status, request_id, new_status))
        updated_id = cursor.fetchone()
        conn.commit()

        cursor.close()
        conn.close()

        if updated_id:
            await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ `{request_id}` –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '{new_status}'.")
        else:
            await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ `{request_id}` —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{new_status}' –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")

async def set_status_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /done –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.
    """
    # –≠—Ç–æ—Ç –∫–æ–¥ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ç–µ–ø–µ—Ä—å –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏.
    # –û–Ω –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∫–Ω–æ–ø–∫–∏ —É–¥–æ–±–Ω–µ–µ.
    # ... (—Å—Ç–∞—Ä—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª)
    pass

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
    """
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /done
    application.add_handler(CommandHandler("done", set_status_done))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button_callback_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    application.run_polling()

if __name__ == '__main__':

    main()
